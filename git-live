#!/bin/bash

set -uo pipefail
# set -x

DEFAULT_INTERVAL_SEC="900"

# ==============================
# Example config
# ==============================
#
# ------------------------------
# Secret
# ------------------------------
# apiVersion: v1
# kind: Secret
# metadata:
#   name: git-secret
# type: ananace/git-live
# data:
#   username: 'ZXhhbXBsZQo='
#   password: 'c2VjcmV0Cg=='
#
# ------------------------------
# Pod
# ------------------------------
# apiVersion: v1
# kind: Pod
# metadata:
#   name: git-example
# spec:
#   containers:
#   - name: busybox
#     image: busybox
#     command:
#       - sh
#       - -c
#       - |
#         ls -l /data
#         tail -f /data/README.md
#     volumeMounts:
#     - name: data
#       mountPath: /data
#   volumes:
#   - name: data
#     flexVolume:
#       driver: ananace/git-live
#       options:
#         repo: https://github.com/ananace/flexvolume-git-live
#       readOnly: true
#       secretRef:
#         name: git-secret
# ------------------------------

# Uncomment the following lines to see how this plugin is called:
# echo >> /tmp/git-live.log
# date >> /tmp/git-live.log
# echo "$@" >> /tmp/git-live.log

exitNotSupported() {
  echo '{"status":"Not supported"}'
  exit 1
}
exitFailure() {
  local message="${1:-'Unknown error in the ananace/git-live flexvolume script'}"
  jq -Mcn --arg message "$message" '{"status":"Failure","message":$message}'
  exit 1
}
exitSuccess() {
  local message="${1:-'Ok'}"
  jq -Mcn --arg message "$message" '{"status":"Success","message":$message}'
  exit 0
}

assertBinary() {
  local binary="$1"
  if ! command -v "$binary" > /dev/null; then
    exitFailure "Failed to initialize the ananace/git-live flexvolume, unable to find the $binary binary"
  fi
}

startPuller() {
  if [[ -f /run/git-live/active-unit-information ]]; then
    # Puller timer is already running
    return 0
  fi

  local interval="$1"

  local interval_h=$((interval / 3600))
  interval=$((interval % 3600))
  local interval_m=$((interval / 60))
  interval=$((interval % 60))

  local intervalstr=""
  if [[ $interval_h -gt 0 ]]; then intervalstr="${interval_h}h"; fi
  if [[ $interval_m -gt 0 ]]; then intervalstr="${intervalstr} ${interval_m}m"; fi
  if [[ $interval -gt 0 ]]; then intervalstr="${intervalstr} ${interval}s"; fi

  local script="$(realpath "$0")"
  unit=$(systemd-run --on-active="$intervalstr" --on-unit-active="$intervalstr" "$script" git-refresh 2>&1)
  if [[ $? -ne 0 ]]; then
    exitFailure 'Failed to start the refresh timer'
  fi

  echo "$unit" > /run/git-live/active-unit-information
}

init() {
  assertBinary awk
  assertBinary base64
  assertBinary git
  assertBinary jq
  assertBinary realpath
  assertBinary sha256sum
  assertBinary systemd-run

  mkdir -p /run/git-live/indexes
  startPuller "${FLEXVOLUME_INTERVAL:-$DEFAULT_INTERVAL_SEC}"

  echo '{"status":"Success","message":"The ananace/git-live flexvolume initialized successfully.","capabilities":{"attach":false}}'
}

doTick() {
  while read -r repo; do
    if ! cd "$repo"; then
      echo "Failed to cd to $repo, skipping"
      continue
    fi

    # Just to avoid any issues due to the running pod
    local mountPointSha="$(pwd | sha256sum | awk '{print $1}')"
    local gitIndex="/run/git-live/indexes/${mountPointSha}"
    echo "gitdir: $gitIndex" > .git

    ref="$(git symbolic-ref --short HEAD)"
    if [[ $? -ne 0 ]]; then
      echo "Failed to find head for $repo, skipping"
      continue
    fi

    git fetch -q origin "$ref" && \
    git reset -q --hard "origin/$ref"
  done </run/git-live/active-repos
}

doMount() {
  if [[ -z ${1:-} || -z ${2:-} ]] ; then
    exitFailure "git-live mount: syntax error. usage: git-live mount <mount dir> <json options>"
  fi
  local mountPoint="$1"
  local mountPointSha="$(echo "$mountPoint" | sha256sum | awk '{print $1}')"
  local gitIndex="/run/git-live/indexes/${mountPointSha}"
  shift

  json=$(printf '%s ' "${@}")
  if ! jq -e . > /dev/null 2>&1 <<< "$json" ; then
    exitFailure "git-live mount: syntax error. invalid json: '$json'"
  fi

  local options="--separate-git-dir \"${gitIndex}\" --single-branch --depth 1"

  repo="$(jq --raw-output -e '.repo' <<< "$json" 2>/dev/null)"
  if [[ $? -ne 0 ]]; then
    exitFailure 'git-live mount: option repo missing in flexvolume configuration.'
  fi

  if [[ "$repo" != "http"* ]]; then
    exitFailure 'git-live mount: currently only supports HTTP(S) checkouts'
  fi

  branch="$(jq --raw-output -e '.branch' <<< "$json")"
  if [[ $? -eq 0 ]]; then
    options="$options --branch \"${branch}\""
  fi

  gitUsernameBase64="$(jq --raw-output -e '.["kubernetes.io/secret/username"]' <<< "$json" 2>/dev/null)"
  if [[ $? -eq 0 ]] ; then
    gitPasswordBase64="$(jq --raw-output -e '.["kubernetes.io/secret/password"]' <<< "$json" 2>/dev/null)"
    if [[ $? -ne 0 ]] ; then
      exitFailure "git-live mount: password not found. the flexVolume definition must contain a secretRef to a secret with username and password."
    fi
    gitUsername="$(base64 --decode <<< "$gitUsernameBase64" 2>/dev/null)"
    if [[ $? -ne 0 ]] ; then
      exitFailure "git-live mount: username secret is not base64 encoded."
    fi
    gitPassword="$(base64 --decode <<< "$gitPasswordBase64" 2>/dev/null)"
    if [[ $? -ne 0 ]] ; then
      exitFailure "git-live mount: password secret is not base64 encoded."
    fi

    repo="$(sed -e "s|://|://${gitUsername}:${gitPassword}@|" <<< "$repo")"
  fi

  if ! eval git clone "$options" -- "$repo" "$mountPoint" &>/dev/null; then
    exitFailure 'git-live mount: git clone failed'
  fi

  echo "$mountPoint" >> /run/git-live/active-repos

  exitSuccess 'Mount succeeded'
}

doUnmount() {
  if [[ -z "${1:-}" ]]; then exitFailure 'git-live unmount: syntax error. Usage: git-live unmount <directory>'; fi

  local mountPoint="$1"
  if ! [[ -d "$mountPoint" ]]; then exitFailure "git-live unmount: Error, $mountPoint does not exist, can't umount."; fi

  local mountPointSha="$(echo "$mountPoint" | sha256sum | awk '{print $1}')"
  local gitIndex="/run/git-live/indexes/${mountPointSha}"

  sed -e "\|${mountPoint}|d" -i /run/git-live/active-repos
  rm -rf "$mountPoint" "$gitIndex"

  exitSuccess 'Unmount succeeded'
}

command=${1:-}
if [[ -n $command ]]; then
  shift
fi

case "$command" in
  init)
    init "$@"
    ;;

  mount)
    doMount "$@"
    ;;

  unmount)
    doUnmount "$@"
    ;;

  git-refresh)
    doTick "$@"
    ;;

  *)
    exitNotSupported
    ;;
esac
